#!/bin/bash
##-----------------------------LICENSE NOTICE------------------------------------
##  This file is part of CPCtelera: An Amstrad CPC Game Engine 
##  Copyright (C) 2018 ronaldo / Fremos / Cheesetea / ByteRealms (@FranGallegoBR)
##
##  This program is free software: you can redistribute it and/or modify
##  it under the terms of the GNU Lesser General Public License as published by
##  the Free Software Foundation, either version 3 of the License, or
##  (at your option) any later version.
##
##  This program is distributed in the hope that it will be useful,
##  but WITHOUT ANY WARRANTY; without even the implied warranty of
##  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
##  GNU Lesser General Public License for more details.
##
##  You should have received a copy of the GNU Lesser General Public License
##  along with this program.  If not, see <http://www.gnu.org/licenses/>.
##------------------------------------------------------------------------------

###########################################################################
## CPCTELERA ENGINE
###########################################################################

##
## File: cpct_img2tileset
##
##    Converts an image file with a set of tile or sprite images into a 
## CPCtelera C-array tileset along with arrays for all tiles/sprites.
##
## Usage:
##    <cpct_img2tileset> [options] [image_file]
##
## Requisites:
##    This scripts uses Img2CPC utility by Augusto Ruiz to convert the PNG
## file into screen pixel definitions. This requires freeimage libraries to be
## installed under Linux and MacOSX (they are already included for Windows/Cygwin)
##
## Description:
##    This script converts an image file containing a set of tile or sprite definitions
## of the same size into 2 files (.c and .h) ready to be passed to the C compiler 
## for inclusion into a program. 
##    By default, this script converts the image into 4x4-pixel tiles. This means that
## the script splits the whole image into 4x4-pixel individual images and converts each
## one of them into a tile. You may change sizes by using -tw / -th command line modifiers. 
##    Generated output contains screen-pixel-format defined arrays with all the individual
## sprites extracted from the image file. It also contains an aditional array, named _tileset,
## with pointers to all generated tiles/sprites. This tileset array may be optinally not 
## generated with -nt | --no-tileset modifier.
##    To do the conversion, the script calls Img2CPC, which reads pixels one by one 
## and transform them into the closest colour value from the defined Amstrad CPC palette. 
## If no palette is given to this script, standard Amstrad CPC palette is used (the one 
## that is set when a CPC computer starts).
##    Provided image file may be a PNG, JPG, BMP, GIF or TIFF file. 
##
## Command line options:
##    -bn  | --tiles-basename  <name>          - Sets the basename that will be used as C-identifier 
##                                               for tiles or sprites. Default: g_tile
##    -bnp | --tiles-basename-prefix <prefix>  - Sets the prefix for the basename that will be used for the 
##                                               C-identifier of tiles and sprites. C-identifier will be "<prefix>_<image_file>"
##    -g   | --gray-code                       - Generate rows of pixels ordered in Gray Code sequence.
##                                               For example, for 8 rows the order would be { 0, 1, 3, 2, 6, 7, 5, 4 }
##    -h   | --help                            - Shows help information on the terminal.
##    -im  | --interlaced-masks                - Generates transparent sprites with interlaced masks
##                                               using 0 as the default index of the palette colour to
##                                               be considered transparent
##    -m   | --mode <cpc_graphics_mode>        - Sets the CPC Graphics mode the output data will 
##                                               be produced for (0, 1 or 2). Default: 0.
##    -nt  | --no-tileset                      - Do not generate a tileset array containing pointers to
##                                               generated sprites/tiles
##    -oph | --output-palette-hardware         - Generate output palette array containing hardware values.
##                                               Resulting palette array will be named "<prefix>_palette"
##    -opn | --output-palette-hard-named <name>- Generate output palette array containing hardware values.
##                                               Resulting palette array will be named <name>
##    -of  | --output-format <format>          - Sets the output format. Valid formats: c, bin. Default: c
##    -pf  | --palette-firmware <palete_array> - Sets the Amstrad CPC palette 
##               to be used for the conversion as an array of firmware colour values (up to 16, 
##               in mode 0). Values must be passed inside '{' '}' and separated by spaces. 
##               Following example sets mode 1 palette to Black, white, red and green colours, 
##               to convert the file tiles.png,
##
##                        > cpct_img2tileset -m 1 -pf { 0 26 6 18 } tiles.png
##
##    -scr | --screen-format                   - Outputs data following Amstrad CPC's screen distribution. Rows
##                                               are interlaced: 0, 8, 16, 32... 192, 200, 1, 9, 17... 193, 2, 18...
##    -t   | --transparent-index <index>       - Changes the colour index to be considered transparent
##                                               and is used to generate masks.
##    -th  | --tile-height  <pixels>           - Sets the height of a tile in pixels. Default: 4.
##    -ts  | --tileset <name>                  - Generate output tileset as an array of pointers to tiles 
##                                               with the C-identifier <name> (Default: <basename>_tileset)
##    -tw  | --tile-width   <pixels>           - Sets the width of a tile in pixels. Default: 4.
##    -z   | --zig-zag                         - Generate pixel lines using zig-zag order (left-to-right
##                                               for one line, and right-to-left for the next one)
##
##

## Bash Include files
source $(dirname $0)/lib/bash_library.sh

## Img2CPC utility location
IMG2CPC=${CPCT_PATH}/tools/img2cpc/bin/img2cpc

## Configuration 
PALETTE=( 1 24 20 6 26 0 2 8 10 12 14 16 18 22 24 16 )
PALETTE_SIZE=16
ROWORDER=""
ROWORDER_MSG="Ascending Linear"
PIXELORDER=""
PIXELORDER_MSG="Linear (Left-to-right)"
GENTILESET=""
GENTILESET_ID=""
GENTILESET_MSG="yes"
SCREEN_FORMAT=""
SCREEN_FORMAT_MSG="Tiles/Sprites"
INTERLACED_MASKS=""
INTERLACED_MASKS_MSG="no"
TRANSPARENT_INDEX=""
TRANSPARENT_INDEX_MSG="no"
TILES_WIDTH=4
TILES_HEIGHT=4
TILES_BASENAME_DEFAULT=g_tile
MODE=0
MODEFACTOR=( 2 4 8 )
MODECOLOURS=( 16 4 2 )
VALIDFORMATS=( c bin )
OUTPUT_FORMAT="c"
OUTPUT_FORMAT_OPTION="-of c"

## Simbols used as 'parentheses' delimiters for passing arrays as parameters
LPAR="{"
RPAR="}"

## Show how this script is to be used and exit
##
function usage() {
   echo "${COLOR_LIGHT_YELLOW}USAGE"
   echo "  ${COLOR_LIGHT_BLUE}$(basename $0) [options] <image_file>"
   echo
   echo "${COLOR_CYAN}    Converts an image file with a set of tile or sprite images into a \
CPCtelera C-array tileset along with arrays for all tiles/sprites."
   echo 
   echo "${COLOR_LIGHT_YELLOW}Requisites:"
   echo "${COLOR_CYAN}    This scripts uses Img2CPC utility by Augusto Ruiz to convert the PNG \
file into screen pixel definitions. This requires freeimage libraries to be \
installed under Linux and MacOSX (they are already included for Windows/Cygwin)"
   echo 
   echo "${COLOR_LIGHT_YELLOW}Description:"
   echo "${COLOR_CYAN}    This script converts an image file containing a set of tile or sprite \
definitions of the same size into 2 files (.c and .h) ready to be passed to the C compiler for \
inclusion into a program."
   echo "    By default, this script converts the image into 4x4-pixel tiles. This means that \
the script splits the whole image into 4x4-pixel individual images and converts each one of them \
into a tile. You may change sizes by using -tw / -th command line modifiers."
   echo "    Generated output contains screen-pixel-format defined arrays with all the individual \
sprites extracted from the image file. It also contains an aditional array, named _tileset, \
with pointers to all generated tiles/sprites. This tileset array may be optinally not generated \
with -nt | --no-tileset modifier."
   echo "    To do the conversion, the script calls Img2CPC, which reads pixels one by one \
and transform them into the closest colour value from the defined Amstrad CPC palette. \
If no palette is given to this script, standard Amstrad CPC palette is used (the one \
that is set when a CPC computer starts)."
   echo "    Provided image file may be a PNG, JPG, BMP, GIF or TIFF file. "
   echo
   echo "${COLOR_LIGHT_YELLOW}OPTIONS"
   echo 
   echo "${COLOR_LIGHT_BLUE}  -bn  | --tiles-basename  <name>"
   echo "${COLOR_CYAN}       Sets the basename that will be used as C identifier for tiles or sprites. Default: g_tile"
   echo "${COLOR_LIGHT_BLUE}  -bnp | --tiles-basename-prefix <prefix>"
   echo "${COLOR_CYAN}       Sets the prefix for the basename that will be used for the C-identifier of tiles and sprites. C-identifier will be \"<prefix>_filename\""
   echo "${COLOR_LIGHT_BLUE}  -g   | --gray-code"
   echo "${COLOR_CYAN}       Generate rows of pixels ordered in Gray Code sequence. For example, for 8 rows the order would be { 0, 1, 3, 2, 6, 7, 5, 4 }"
   echo "${COLOR_LIGHT_BLUE}  -h   | --help"
   echo "${COLOR_CYAN}       Shows this help information"
   echo "${COLOR_LIGHT_BLUE}  -im  | --interlaced-masks"
   echo "${COLOR_CYAN}       Generates transparent sprites with interlaced masks using 0 as the default colour index \
of the palette to be considered transparent."
   echo "${COLOR_LIGHT_BLUE}  -m   | --mode   <cpc_graphics_mode>"
   echo "${COLOR_CYAN}       Sets the CPC Graphics mode the output data will be produced for (0, 1 or 2). Default: 0."
   echo "${COLOR_LIGHT_BLUE}  -nt  | --no-tileset"
   echo "${COLOR_CYAN}       Do not generate a tileset array containing pointers to generated sprites/tiles."
   echo "${COLOR_LIGHT_BLUE}  -of  | --output-format <format>"
   echo "${COLOR_CYAN}       Sets the output format. Valid formats: c, bin. Default: c"
   echo "${COLOR_LIGHT_BLUE}  -oph | --output-palette-hardware"
   echo "${COLOR_CYAN}       Generate output palette array containing hardware values. Resulting palette array will be named \"<prefix>_palette\""
   echo "${COLOR_LIGHT_BLUE}  -opn | --output-palette-hard-named <name>"
   echo "${COLOR_CYAN}       Generate output palette array containing hardware values. Resulting palette array will be named <name>."
   echo "${COLOR_LIGHT_BLUE}  -pf  | --palette-firmware <palete_array> "
   echo "${COLOR_CYAN}       Sets the Amstrad CPC palette to be used for the conversion as an array \
of firmware colour values (up to 16, in mode 0). Values must be passed inside '$LPAR' '$RPAR' and \
separated by spaces. Following example sets mode 1 palette to Black, white, red and green colours, \
to convert the file tiles.png: "
   echo
   echo "          ${COLOR_WHITE}cpct_img2tileset -m 1 -pf { 0 26 6 18 } tiles.png"
   echo
   echo "${COLOR_LIGHT_BLUE}  -scr | --screen-format"
   echo "${COLOR_CYAN}       Outputs data following Amstrad CPC's screen distribution. Rows are interlaced: 0, 8, 16, 32... 192, 200, 1, 9, 17... 193, 2, 18..."
   echo "${COLOR_LIGHT_BLUE}  -t   | --transparent-index <colour_index>"
   echo "${COLOR_CYAN}       Changes the colour index to be considered transparent and is used to generate masks"
   echo "${COLOR_LIGHT_BLUE}  -th  | --tile-height  <pixels>"
   echo "${COLOR_CYAN}       Sets the height of a tile in pixels. Default: 4."
   echo "${COLOR_LIGHT_BLUE}  -ts  | --tileset  <name>"
   echo "${COLOR_CYAN}       Generate output tileset as an array of pointers to tiles with the C-identifier <name>"
   echo "${COLOR_LIGHT_BLUE}  -tw  | --tile-width   <pixels>"
   echo "${COLOR_CYAN}       Sets the width of a tile in pixels. Default: 4."
   echo "${COLOR_LIGHT_BLUE}  -z   | --zig-zag"                         
   echo "${COLOR_CYAN}       Generate pixel lines using zig-zag order (left-to-right for one line, and right-to-left for the next one)"
   echo ${COLOR_NORMAL}
   exit 1
}

## Converts an integer value into its equivalent in gray code order and echoes the result
## $1: Integer number to convert
##
function int2gray() {
   local n="$1"
   printf "%i" $(( n ^ (n >> 1) ))
}

## Generates and echoes a GrayCode integer sequence
##  $1: First integer number to show in gray code
##  $2: Last integer number to show in gray code (Both recommended to be power of 2)
##  $3: Separator between numbers
##
function graySeq() {
   local i="$1"
   local max="$2"
   local sep="$3"
   local gray
   if (( i <= max )); then
      int2gray i
   fi
   while (( ++i <= max )); do
      echo -n "${sep}" 
      int2gray i
   done
}

##############################################################
###############################################################
## Check command line parameters
##

if (( $# < 1 )); then
   usage
fi

while (( $# >= 1 )); do
   case $1 in
      ## Get basename for tiles
      "-bn" | "--tiles-basename")
         ## Basename for tiles must be a valid C identifier
         if isEmpty "$2"; then
            paramError "Parameter -bn (--tiles-basename) must be followed by a valid C identifier." 4
         elif ! isValidCIdentifier "$2"; then
            paramError "'$2' is not a valid C-identifier for -bn (--tiles-basename)." 5
         fi

         TILES_BASENAME="${TILES_BASENAME_PREFIX}${2}"
         ABSOLUTE_BASENAME="-abn"
         shift
      ;;
      ## Get basename prefix for tiles
      "-bnp" | "--tiles-basename-prefix")
         ## Basename prefix for tiles must be a valid C identifier
         if isEmpty "$2"; then
            paramError "Parameter -bnp (--tiles-basename-prefix) must be followed by a valid C identifier." 15
         elif ! isValidCIdentifier "$2"; then
            paramError "'$2' is not a valid C-identifier for -bnp (--tiles-basename-prefix)." 16
         fi

         TILES_BASENAME_PREFIX="$2"
         TILES_BASENAME="${2}${TILES_BASENAME}"
         shift
      ;;
      ## Gray Code Row order
      "-g" | "--gray-code")
         ROWORDER="graycode"
         ROWORDER_MSG="Graycode"
      ;;
      ## Show Help
      "-h" | "--help")
         usage
      ;;
      ## Generate interlaced masks with a transparent colour
      "-im" | "--interlaced-masks")        
         INTERLACED_MASKS="-im"
         INTERLACED_MASKS_MSG="yes"
         TRANSPARENT_INDEX="-t 0"
         TRANSPARENT_INDEX_MSG="Palette Index(0)"
      ;;
      ## Get CPC Mode
      "-m" | "--mode")

         ## CPC Mode must be 0, 1 or 2
         if [[ "$2" != "0" && "$2" != "1" && "$2" != "2" ]]; then
            paramError "Parameter -m (--mode) must be followed by a valid Amstrad CPC mode (0, 1 or 2)." 7
         fi
         MODE=$2
         shift
      ;;
      ## Do not generate tilesets
      "-nt" | "--no-tileset")
         GENTILESET="-nt"
         GENTILESET_MSG="no"
      ;;
      ## Generate output palette as hardware values
      "-oph" | "--output-palette-hardware")
         OUTPUTPALETTE="-ophw"
         OUTPUTPALETTE_ID=""
      ;;
      ## Generate output palette as hardware values
      "-opn" | "--output-palette-hard-named")
         ## Hardware palette requires a valid C-identifier
         if isEmpty "$2"; then
            paramError "Parameter -opn (--output-palette-hard-named) must be followed by the C-identifier for the palette." 13
         elif ! isValidCIdentifier "$2"; then
            paramError "Palette name '$2' for option -opn (--output-palette-hard-named) is not a valid C-identifier." 14
         fi
         OUTPUTPALETTE="-ophw"
         OUTPUTPALETTE_ID="$2"
         shift
      ;;
      ## Select output format 
      "-of" | "--output-format")
         OUTPUT_FORMAT=$(toLower "$2")
         ## Output format must be from a list of valid output formats
         if ! contains ${VALIDFORMATS[@]} "$OUTPUT_FORMAT"; then
             paramError "'$2' is not a valid output format for -of (--output-format). Valid formats are: ${VALIDFORMATS[*]}" 16
         fi

         OUTPUT_FORMAT_OPTION="-of ${OUTPUT_FORMAT}"
         shift
      ;;
      ## Get a palette as an array of firmware values
      "-pf" | "--palette-firmware")
         ## Error messages
         PALETTEERROR="Parameter -pf (--palette-firmware) must be followed by an array \
            of firmware colour values (integers from 0 to 26) separated by spaces and \
            enclosed into '$LPAR' '$RPAR'. An example setting palette colours 0 to 3 could be \
            this one: $LPAR 1 20 4 5 $RPAR "
         INTEGERERROR="is not an integer value between 0 and 26. $PALETTEERROR"

         ## Set Palette to 0's and palete size to 0
         PALETTE=( 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 )

         ## Check initial parenthesis
         shift
         NEXT=$1
         if [[ "${NEXT:0:1}" != "$LPAR" ]]; then
            paramError "$PALETTEERROR" 12
         elif (( ${#NEXT} > 1 )); then
            NEXT=${NEXT:1}
         else
            shift
            NEXT=$1
         fi

         ## Go through all palette values
         i=0
         RPAR_FOUND=0
         PALETTE_SIZE=0
         while (( ! RPAR_FOUND )); do
            ## Check for parenthesis first
            if (( ${#NEXT} > 1 )) && [[ "${NEXT:(-1)}" == "$RPAR" ]]; then
               RPAR_FOUND=1
               PALETTE_SIZE=1
               NLEN1=$(( ${#NEXT} - 1 ))
               NEXT=${NEXT:0:$NLEN1}
            fi
            if [[ "$NEXT" == "$RPAR" ]]; then
               RPAR_FOUND=1
            elif isEmpty "$NEXT"; then
               paramError "Closing '$RPAR' not found while processing palette array."
            elif ! isInt "$NEXT" || (( NEXT < 0 || NEXT > 26 )); then
               paramError "'$NEXT' $INTEGERERROR" 13
            else
               ## Insert new palette element only if we have not exceeded size
               if (( i > 15 )); then
                  paramError "Palette array exceeds maximum size. It must have 16 values at most."
               fi               
               PALETTE[$i]="$NEXT"
   
               ## Move to next value
               if (( ! RPAR_FOUND )); then
                  i=$((i+1))
                  shift
                  NEXT="$1"
               fi
            fi
         done
         PALETTE_SIZE=$(( PALETTE_SIZE + i ))
      ;;
      ## Zig-Zag pixel order
      "-scr" | "--screen-format")
         SCREEN_FORMAT="-scr"
         SCREEN_FORMAT_MSG="Screen Distribution"
      ;;
      ## Get transparent Index for generating Masks
      "-t" | "--transparent-index")
         ## Transparent index must be between 0 and 15
         if isEmpty "$2"; then
            paramError "Parameter -t (--transparent-index) must be followed by the integer colour index (0-15)." 8
         elif ! isInt "$2"; then
            paramError "Colour index '$2' for option -t (--transparent-index) is not a valid integer number." 9
         elif (( "$2" < 0 || "$2 " > 15 )); then
            paramError "Colour index '$2' for option -t (--transparent-index) is out of valid palette range (0-15)" 10
         fi
         TRANSPARENT_INDEX="-t $2"
         TRANSPARENT_INDEX_MSG="Palette Index($2)"
         shift
      ;;
      ## Get tile height
      "-th" | "--tile-height")

         ## Tile height must be an integer
         if ! isInt "$2"; then
            paramError "Parameter -th (--tile-height) must be followed by an integer representing the hieght of a tile in bytes." 9
         fi
         TILES_HEIGHT=$2
         shift
      ;;
      ## Generate tileset
      "-ts" | "--tileset")
         ## Basename prefix for the tileset must be a valid C identifier
         if isEmpty "$2"; then
            paramError "Parameter -ts (--tileset) must be followed by a valid C identifier." 17
         elif ! isValidCIdentifier "$2"; then
            paramError "'$2' is not a valid C-identifier for -ts (--tileset)." 18
         fi
         GENTILESET=""
         GENTILESET_ID="$2"
         GENTILESET_MSG="yes"
         shift
      ;;
      ## Get tile width
      "-tw" | "--tile-width")

         ## Tile width must be an integer
         if ! isInt "$2"; then
            paramError "Parameter -tw (--tile-width) must be followed by an integer representing the width of a tile in bytes." 8
         fi
         TILES_WIDTH=$2
         shift
      ;;
      ## Zig-Zag pixel order
      "-z" | "--zig-zag")
         PIXELORDER="-z"
         PIXELORDER_MSG="Zig-Zag (Left-to-right then Right-to-left)"
      ;;
      ## Get main parameter (filename)
      *)
         if isCommandLineOption "$1"; then
            paramError "Unrecognized command line option '$1'" 10
         elif ! isEmpty "$FILE"; then
            paramError "Unrecognized parameter '$1'. Have you already provided a <filename> parameter?" 11
         else
            EnsureExists file "$1"
         fi
         FILE="$1"
         IMG2CPC_OUTPUT="$(filenameWithNoExt "$FILE")"
      ;;
   esac
   shift
done

## File parameter must have been passed (not empty)
if isEmpty "$FILE"; then
   paramError "A <filename> parameter is required." 12
fi

## Check Img2CPC
if [ ! -f $IMG2CPC ]; then
   Error "'$IMG2CPC' does not exist or is not readable. This file is required for cpct_img2tileset \
to work properly. Please, check CPCtelera's tools installation and ensure Img2CPC is correctly installed."
elif [ ! -x $IMG2CPC ]; then
   echo "${COLOR_LIGHT_YELLOW}WARNING:${COLOR_CYAN}"
   echo "   '$IMG2CPC' is not executable. Execution permission is required to convert images to code.${COLOR_LIGHT_CYAN}"
   echo
   askSimpleQuestion y n "Do you want this script to try to make it executable? (y/n)" ANSWER
   echo "${COLOR_NORMAL}"
   echo
   if [[ "$ANSWER" == "n" ]]; then
      paramError "'$IMG2CPC' has not been modified. This script cannot continue. Aborting. "
   fi
   echo "Changing '$IMG2CPC' execution permission... "
   if ! chmod +x "$IMG2CPC"; then
      Error "Your user has not got enough privileges to change $IMG2CPC' execution permission. Please, change it \
manually and run this script again."
   fi
fi

## Fix TILES BASENAME
if [ "$TILES_BASENAME" = "" ]; then
   TILES_BASENAME="$TILES_BASENAME_DEFAULT"
fi

##
## Generate Gray Code sequence for Gray-Coded Row Orders
##
LIMIT=$(( TILES_HEIGHT - 1 ))
case "$ROWORDER" in
   "graycode")
      SEQ="$(graySeq 0 ${LIMIT} ',')"
      ROWORDER="-s ${SEQ}"
      ROWORDER_MSG="Gray Code (${SEQ})"
   ;;
   *)
      SEQ="$(seq -s ',' 0 ${LIMIT} )"
      ROWORDER_MSG="Ascending linear (${SEQ})"
   ;;
esac

###############################################################
###############################################################
## Convert image to CPCtelera's C Array.
##

## Start processing and print useful information
echo
echo "${COLOR_LIGHT_YELLOW}PROCESSING FILE '${COLOR_NORMAL}$FILE${COLOR_CYAN}'"
echo "${COLOR_GREEN}CPC Mode        : ${COLOR_LIGHT_YELLOW}${MODE}${COLOR_CYAN}"
echo "${COLOR_GREEN}Tile/Sprite Size: ${COLOR_LIGHT_YELLOW}${TILES_WIDTH}x${TILES_HEIGHT}${COLOR_CYAN} pixels"
echo "${COLOR_GREEN}Format          : ${COLOR_LIGHT_YELLOW}${SCREEN_FORMAT_MSG}"
echo "${COLOR_GREEN}Interlaced Mask : ${COLOR_LIGHT_YELLOW}${INTERLACED_MASKS_MSG}"
echo "${COLOR_GREEN}Transparency    : ${COLOR_LIGHT_YELLOW}${TRANSPARENT_INDEX_MSG}"
echo "${COLOR_GREEN}Generate Tileset: ${COLOR_LIGHT_YELLOW}${GENTILESET_MSG}"
echo "${COLOR_GREEN}Basename        : ${COLOR_LIGHT_YELLOW}'${TILES_BASENAME}'"
echo "${COLOR_GREEN}Output Format   : ${COLOR_LIGHT_YELLOW}${OUTPUT_FORMAT}"
echo "${COLOR_GREEN}Pixel Order     : ${COLOR_LIGHT_YELLOW}${PIXELORDER_MSG}"
if [ "$SCREEN_FORMAT" = "" ]; then
   echo "${COLOR_GREEN}Row Order       : ${COLOR_LIGHT_YELLOW}${ROWORDER_MSG}"
fi
printf "${COLOR_GREEN}Palette         : ${COLOR_LIGHT_YELLOW}"
for((i=0; i < ${MODECOLOURS[$MODE]}; i++)); do
   printf "%s " ${PALETTE[$i]}
done
echo "${COLOR_CYAN}(Firmware values)${COLOR_NORMAL}"
# Message to be generated only when outputing palette array
if [ "$OUTPUTPALETTE_ID" != "" ]; then
echo "${COLOR_GREEN}Palette C-name  : ${COLOR_LIGHT_YELLOW}'${OUTPUTPALETTE_ID}'"
fi

## Pass img2cpc to convert to CPCtelera's C Arrays
echo "${COLOR_LIGHT_RED}[${COLOR_LIGHT_YELLOW}PROCESSING${COLOR_LIGHT_RED}]${COLOR_LIGHT_YELLOW} ${COLOR_CYAN}Converting tiles \
to ${COLOR_NORMAL}CPCtelera${COLOR_CYAN}'s C code using ${COLOR_NORMAL}Img2CPC${COLOR_CYAN}..."

## Run IMG2CPC and check exit status
if ${IMG2CPC} -fwp "$(valuesToCommaList ${PALETTE[@]:0:$PALETTE_SIZE})" $OUTPUT_FORMAT_OPTION -m "$MODE" \
-w "$TILES_WIDTH" -h "$TILES_HEIGHT" -bn "$TILES_BASENAME" $ABSOLUTE_BASENAME --includes "<types.h>" -osz \
-o "$IMG2CPC_OUTPUT" $INTERLACED_MASKS $TRANSPARENT_INDEX $GENTILESET $OUTPUTPALETTE $ROWORDER $SCREEN_FORMAT \
$PIXELORDER "${FILE}"; then
   ## Postprocess depending on output format
   if [ "${OUTPUT_FORMAT}" = "c" ]; then
      ## Change generated palette names from ${TILES_BASENAME}_palette to selected name, in case
      if [ "${OUTPUTPALETTE_ID}" != "" ]; then
         replaceTag "${TILES_BASENAME}_palette" "${OUTPUTPALETTE_ID}" "${IMG2CPC_OUTPUT}.c"
         replaceTag "${TILES_BASENAME}_palette" "${OUTPUTPALETTE_ID}" "${IMG2CPC_OUTPUT}.h"
      fi
      ## Change generated tileset names from ${TILES_BASENAME}_tileset to selected name, in case
      if [ "${GENTILESET}" = "" -a "${GENTILESET_ID}" != "" ]; then
         replaceTag "${TILES_BASENAME}_tileset" "${GENTILESET_ID}" "${IMG2CPC_OUTPUT}.c"
         replaceTag "${TILES_BASENAME}_tileset" "${GENTILESET_ID}" "${IMG2CPC_OUTPUT}.h"
      fi
   
      ## Success message
      echo "${COLOR_LIGHT_GREEN} SUCCESS! ${COLOR_CYAN}Files '${COLOR_NORMAL}${IMG2CPC_OUTPUT}.c${COLOR_CYAN}' and \
'${COLOR_NORMAL}${IMG2CPC_OUTPUT}.h${COLOR_CYAN}' have been created with ${COLOR_NORMAL}CPCtelera${COLOR_CYAN}'s \
codification of tiles/sprites from '${COLOR_NORMAL}$FILE${COLOR_CYAN}'.${COLOR_NORMAL}"
      echo
   elif [ "${OUTPUT_FORMAT}" = "bin" ]; then
      ## Change generated palette names from ${TILES_BASENAME}_palette to selected name, in case
      if [ "${OUTPUTPALETTE_ID}" != "" ]; then
         TBNU=$(toUpper ${TILES_BASENAME})
         OPIDU=$(toUpper ${OUTPUTPALETTE_ID})
         replaceTag "${TBNU}_PALETTE_OFF"  "${OPIDU}_OFF"  "${IMG2CPC_OUTPUT}.h"
         replaceTag "${TBNU}_PALETTE_SIZE" "${OPIDU}_SIZE" "${IMG2CPC_OUTPUT}.h"
         replaceTag "${TBNU}_PALETTE_OFF"  "${OPIDU}_OFF"  "${IMG2CPC_OUTPUT}.h.s"
         replaceTag "${TBNU}_PALETTE_SIZE" "${OPIDU}_SIZE" "${IMG2CPC_OUTPUT}.h.s"
      fi

      echo "${COLOR_LIGHT_GREEN} SUCCESS! ${COLOR_CYAN}Files '${COLOR_NORMAL}${IMG2CPC_OUTPUT}.bin${COLOR_CYAN}', \
'${COLOR_NORMAL}${IMG2CPC_OUTPUT}.h${COLOR_CYAN}' and '${COLOR_NORMAL}${IMG2CPC_OUTPUT}.h.s${COLOR_CYAN}' have been \
created with ${COLOR_NORMAL}CPCtelera${COLOR_CYAN}'s codification of tiles/sprites from \
'${COLOR_NORMAL}$FILE${COLOR_CYAN}'.${COLOR_NORMAL}"
   fi
else
   ## Error message
   echo "${COLOR_LIGHT_RED}ERROR!${COLOR_WHITE} Some error happened while processing file with img2cpc. Please, "\
"review files and image conversion optins to fix the problem.${COLOR_NORMAL}"
   echo
   exit 20
fi

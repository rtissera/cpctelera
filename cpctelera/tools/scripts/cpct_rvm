#!/bin/bash
##-----------------------------LICENSE NOTICE------------------------------------
##  This file is part of CPCtelera: An Amstrad CPC Game Engine 
##  Copyright (C) 2018 ronaldo / Fremos / Cheesetea / ByteRealms (@FranGallegoBR)
##
##  This program is free software: you can redistribute it and/or modify
##  it under the terms of the GNU Lesser General Public License as published by
##  the Free Software Foundation, either version 3 of the License, or
##  (at your option) any later version.
##
##  This program is distributed in the hope that it will be useful,
##  but WITHOUT ANY WARRANTY; without even the implied warranty of
##  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
##  GNU Lesser General Public License for more details.
##
##  You should have received a copy of the GNU Lesser General Public License
##  along with this program.  If not, see <http://www.gnu.org/licenses/>.
##------------------------------------------------------------------------------

###########################################################################
## CPCTELERA ENGINE
###########################################################################

##
## File: cpct_rvm
##    This script lets the user execute RetroVirtualMachine from command line 
## and automatically run a file from a DSK/SNA at will. 
##
## Usage:
##    <cpct_rvm> [options] [DSKFile/SNAFile]
##
## Description:
##    This script automatically launches RetroVirtualMachine emulator (RVM) 
## and executes an Amstrad CPC. If required, it additionally passes a DSK/SNA file 
## which gets automatically loaded and executed. When loading a DSK file, it will 
## be into RVM's FD1 ('A' unit) and a file with the same name of the DSK file will
## be executed with a 'RUN "FILE"' command. Please, refer to this script's options
## if you wanted to configure this RUN command. SNA files are automatically
## restored into memory and execution continues from their PC location (included 
## in the SNA). 
##
##    By default, RVM is run with a CPC464 machine configuration for SNA files, 
## and with a CPC664 for DSK files. Refer to this script's options to select 
## different machines or configurations.
##    
##    If RVM is not installed on the system or not propperly configured to
## be used with this script, the script prompts the user and helps to configure
## and/or to install RVM. Users can either give the script the path of their own
## RVM installations or ask the script to automatically download and install
## it inside CPCtelera's tool folder. For this last operation, wget and unzip 
## commands are required (they should be installed in the system).
##
## Command line options:
##    -a  | --any-dsk         - Lauches RVM and loads first DSK file to match *.dsk
##    -ac | --any-cdt         - Lauches RVM and loads first CDT file to match *.cdt
##    -as | --any-sna         - Lauches RVM and loads first SNA file to match *.sna
##    -c  | --command         - Automatically execute command after emulator startup
##    -ds | --default-shader  - Execute RVM with default postprocessing shader activated
##    -n  | --no-execute      - Lauches RVM but does not automatically RUN any DSK program.
##    -nw | --no-warp         - Does not automatically enter Warp Mode on CDT load.
##    -m  | --machine <MACH>  - Selects a specific machine MACH to be emulated {cpc464, cpc664, cpc6128}
##    -r  | --run <FILENAME>  - Automatically runs FILENAME with the command RUN"FILENAME
##    -w  | --warp            - Does automatically enter Warp Mode.
##    -h  | --help            - Shows help information on the terminal.
##

##
## Global configuration
##

# Script configuration
CPCT_TOOLS_FOLDER=$(dirname $0)/..

WWW_RVM_LINUX64=http://retrovirtualmachine.ams3.digitaloceanspaces.com/release/beta1/linux/x64/RetroVirtualMachine.2.0.beta-1.r7.linux.x64.zip
WWW_RVM_LINUX32=http://retrovirtualmachine.ams3.digitaloceanspaces.com/release/beta1/linux/x86/RetroVirtualMachine.2.0.beta-1.r7.linux.x86.zip
WWW_RVM_WIN64=http://retrovirtualmachine.ams3.digitaloceanspaces.com/release/beta1/windows/x64/RetroVirtualMachine.2.0.beta-1.r7.windows.x64.zip
WWW_RVM_WIN32=http://retrovirtualmachine.ams3.digitaloceanspaces.com/release/beta1/windows/x86/RetroVirtualMachine.2.0.beta-1.r7.windows.x86.zip
WWW_RVM_OSX=http://retrovirtualmachine.ams3.digitaloceanspaces.com/release/beta1/macos/RetroVirtualMachine.2.0.beta-1.r7.macos.zip
RVM_EXE=RetroVirtualMachine
RVM_EXE_OSX="Retro\ Virtual\ Machine\ 2.app/Contents/MacOS/Retro\ Virtual\ Machine\ 2"
RVM_ZIP=${CPCT_TOOLS_FOLDER}/RVM.zip
RVM_DIR=${CPCT_TOOLS_FOLDER}/rvm
RVM=/path/to/RVM ## Should be read from config file
CONFIG_FILE=$(dirname $0)/.cpct_rvm.config

# Command line parameter variables
FILE=""
FILEMOD=""
AUTOPLAY=""
EXECUTE=true
EXECUTEFILE=""
COMMAND=""
WARP=true
WARPMODE=""
MACHINE=""
SHADER="-ns"
DEFAULTMACHINE_CDT="cpc464"
DEFAULTMACHINE_SNA="cpc464"
DEFAULTMACHINE_DSK="cpc664"
VALIDMACHINES=("cpc464" "cpc664" "cpc6128")

## Bash Include files
source $(dirname $0)/lib/bash_library.sh

## Show how this script is to be used and exit
##
function usage() {
   echo "${COLOR_LIGHT_YELLOW}USAGE"
   echo "  ${COLOR_LIGHT_BLUE}$(basename $0) ${COLOR_LIGHT_CYAN}[options] [DSK/SNA File]"
   echo
   echo "${COLOR_CYAN}  Lets the user execute RetroVirtualMachine from command line and automatically \
run a file from a DSK at will."
   echo
   echo "${COLOR_CYAN}     This script automatically launches RetroVirtualMachine emulator (RVM) \
and executes an Amstrad CPC. If required, it additionally passes a DSK/SNA file \
which gets automatically loaded and executed. When loading a DSK file, it will \
be into RVM's FD1 ('A' unit) and a file with the same name of the DSK file will \
be executed with a 'RUN "FILE"' command. Please, refer to this script's options \
if you wanted to configure this RUN command. SNA files are automatically \
restored into memory and execution continues from their PC location (included \
in the SNA)."
   echo
   echo "${COLOR_CYAN}     By default, RVM is run with a CPC464 machine configuration for SNA files, \
and with a CPC664 for DSK files. Refer to this script's options to select \
different machines or configurations. "
   echo
   echo "${COLOR_CYAN}     If RVM is not installed on the system or not propperly configured to \
be used with this script, the script prompts the user and helps to configure \
and/or to install RVM. Users can either give the script the path of their own \
RVM installations or ask the script to automatically download and install \
it inside CPCtelera's tool folder. For this last operation, wget and unzip \
commands are required (they should be installed in the system)."
   echo
   echo "${COLOR_LIGHT_YELLOW}OPTIONS"
   echo "${COLOR_LIGHT_BLUE}  -a | --any-dsk"
   echo "${COLOR_CYAN}       Lauches RVM and loads first DSK file to match *.dsk."
   echo "${COLOR_LIGHT_BLUE}  -ac| --any-cdt"
   echo "${COLOR_CYAN}       Lauches RVM and loads first CDT file to match *.cdt."
   echo "${COLOR_LIGHT_BLUE}  -as| --any-sna"
   echo "${COLOR_CYAN}       Lauches RVM and loads first SNA file to match *.sna."
   echo "${COLOR_LIGHT_BLUE}  -c | --command"
   echo "${COLOR_CYAN}       Automatically execute command after emulator startup."
   echo "${COLOR_LIGHT_BLUE}  -ds| --default-shader"
   echo "${COLOR_CYAN}       Execute RVM with default postprocessing shader activated"
   echo "${COLOR_LIGHT_BLUE}  -n | --no-execute"
   echo "${COLOR_CYAN}       Lauches RVM but does not automatically RUN any DSK program."
   echo "${COLOR_LIGHT_BLUE}  -nw| --no-warp"
   echo "${COLOR_CYAN}       Does not automatically enter Warp Mode on CDT load."
   echo "${COLOR_LIGHT_BLUE}  -m | --machine <MACH>"
   echo "${COLOR_CYAN}       Selects a specific machine MACH to be emulated {cpc464, cpc664, cpc6128}"
   echo "${COLOR_LIGHT_BLUE}  -r | --run <FILENAME>"
   echo "${COLOR_CYAN}       Automatically runs FILENAME with the command RUN\"FILENAME"
   echo "${COLOR_LIGHT_BLUE}  -h | --help"
   echo "${COLOR_CYAN}       Shows this help information"
   echo ${COLOR_NORMAL}
   exit 1
}

## Ensures that cygpath is installed on Cygwin systems, as it will be 
## required for execution.
## If something is missing, it aborts the script with an error message
##
function ensureExecutionPrerequisitesAreInstalled {
   if checkSystem cygwin; then
      ## Do CYGWIN required stuff
      EnsureCommandAvailable cygpath "cygpath has not been found on the system, and it's required for \
running this script. Please, check cygwin installation and run this script again."
      EnsureCommandAvailable cygstart "cytstart has not been found on the system, and it's required for \
running this script. Please, check cygwin installation and run this script again."
   fi
}

## Transforms a Linux Path into a Cygwin/Wine path.
##    Returns the transformed path through a given global variable
##  $1: System path
##
function getMySystemPath {
   if checkSystem cygwin; then
      ## Do CYGWIN required stuff
      echo "$(cygpath -a -w ${1} 2> /dev/null)" 
   else
      ## Linux / MacOSX use original System Path
      echo "${1}" 
   fi
}

## Insert new RVM path into this script
##  $1: New path to RetroVirtualMachine.exe
##
function setRVMPath {
   local RVMPATH="$1"

   updateVarValueInConfigFile "RVM" "$RVMPATH" $CONFIG_FILE
   RVM="${1}"
}

## Aborts the program showing a message to clarify that no configuration has been updated
##
function exitNoConfig {
   echo
   echo "${COLOR_LIGHT_YELLOW}No configuration has been modified."
   echo "${COLOR_CYAN}You will have to configure RVM launch script later on if you wanted to use it."
   echo "${COLOR_RED}Aborting installation. ${COLOR_NORMAL}"
   exit -1
}

## Shows a colored error message on screen
##  $1: Message to show
##
function showErrorMsg {
   echo "${COLOR_RED}[Error]${COLOR_CYAN} ${1}${COLOR_NORMAL}"
}

## Configure personal RVM installation
##
function configurePersonalRVMInstallation {
   local VALID=false

   while ! $VALID; do
      ## RVM is installed, ask for path
      echo
      echo   "${COLOR_CYAN}This script will help you configure your own RVM installation."
      echo
      echo   "Please, provide ${COLOR_LIGHT_CYAN}full path${COLOR_CYAN} for \
${COLOR_LIGHT_CYAN}${RVM_EXE}${COLOR_CYAN}, or leave it blank if you prefer to exit now and  \
configure this script later on."
      printf "${COLOR_LIGHT_BLUE}Path to ${COLOR_LIGHT_CYAN}${RVM_EXE}${COLOR_LIGHT_BLUE}: ${COLOR_NORMAL}"
      read -e -r RVM
      if [[ "$RVM" == "" ]]; then
         exitNoConfig
      elif [ -f "$RVM" ]; then
         setRVMPath "$RVM"
         VALID=true
      else 
         showErrorMsg "'${COLOR_WHITE}$RVM${COLOR_CYAN}' does not refer to a valid, readable file."
         echo
      fi
   done   
}

## Prints the appropriate URL to download RVM2 for the current OS installed
## If current OS is not supported, it prints "norvmurl"
##
function selectRVMURLForCurrentOS {
   if checkSystem linux32; then
      echo ${WWW_RVM_LINUX32}
   elif checkSystem linux64; then
      echo ${WWW_RVM_LINUX64}
   elif checkSystem win10linux; then
      echo ${WWW_RVM_WIN64}
   elif checkSystem cygwin32; then
      echo ${WWW_RVM_WIN32}
   elif checkSystem cygwin64; then
      echo ${WWW_RVM_WIN64}
   elif checkSystem osx; then
      echo ${WWW_RVM_OSX}
   else
      echo norvmurl
   fi
}

## Create a new installation of RVM inside CPCtelera tools folder
##  Returns 0 on install success, errorCode otherwise
##
function installRVMInCPCtelera {
   local ERRORMSG="is not installed on the system and is required to automatically download and install \
RVM. Please, install it and run this script again or install RVM and provide the path manually. "
   
   ## Check required commands are installed
   if ! isCommandAvailable "wget"; then
      showErrorMsg "Command '${COLOR_WHITE}wget${COLOR_CYAN}' $ERRORMSG" 
      return 1
   elif ! isCommandAvailable "unzip"; then
      showErrorMsg "Command '${COLOR_WHITE}unzip${COLOR_CYAN}' $ERRORMSG" 
      return 2
   fi

   echo
   echo "${COLOR_CYAN}This script can automatically ${COLOR_LIGHT_CYAN}download and install RVM\
${COLOR_CYAN} under your ${COLOR_LIGHT_CYAN}CPCtelera${COLOR_CYAN} tools folder for you."
   echo
   askSimpleQuestion y Y n N "${COLOR_LIGHT_BLUE}Do want RVM to be ${COLOR_LIGHT_CYAN}downloaded \
& installed${COLOR_LIGHT_BLUE} (${COLOR_WHITE}y/n${COLOR_LIGHT_BLUE})?" ANS
   echo ${COLOR_LIGHT_WHITE}$ANS
   if [[ "$ANS" == "y" || "$ANS" == "Y" ]]; then
      echo "${COLOR_CYAN} Selecting appropriate URL for your Operative System...${COLOR_NORMAL}"
      local WWW_RVM=$(selectRVMURLForCurrentOS)
      if [[ "${WWW_RVM}" = "norvmurl" ]]; then
         echo "${COLOR_RED}Your operative system is not supported for automatic download and installation. ${COLOR_NORMAL}"
         echo "${COLOR_RED}Please, kindly manually download & install RVM2 then setup this script by giving it RVM2's executable path. ${COLOR_NORMAL}"
         exitNoConfig
      else 
         echo "${COLOR_CYAN} Downloading RVM from (${COLOR_WHITE}${WWW_RVM}${COLOR_CYAN})...${COLOR_NORMAL}"
         wget -nv --progress=bar -O "$RVM_ZIP" "$WWW_RVM"
         echo "${COLOR_CYAN}Unpacking RVM...${COLOR_NORMAL}"
         unzip -o -q "$RVM_ZIP" -d "$RVM_DIR"
         chmod +x "${RVM_DIR}/${RVM_EXE}"
         rm "$RVM_ZIP"
         if checkSystem osx; then
            setRVMPath "${RVM_DIR}/${RVM_EXE_OSX}"
         else
            setRVMPath "${RVM_DIR}/${RVM_EXE}"
         fi

         echo "${COLOR_LIGHT_CYAN}RVM${COLOR_LIGHT_BLUE} is now configured and installed in '${COLOR_WHITE}\
   #${RVM_DIR}${COLOR_LIGHT_BLUE}'${COLOR_NORMAL}"
         echo
      fi
   else 
      exitNoConfig
   fi

   return 0
}

## Check RVM Installation
##  $1: Path to RetroVirtualMachine.exe
function checkRVMInstallation {
   local RVMEMU="$1"
      
   ## Check if Retro Virtual Machine is installed
   if [ ! -f "$RVMEMU" ]; then
      ## RVM is not installed
      echo
      echo "${COLOR_GREEN}%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"
      echo "${COLOR_GREEN}%% ${COLOR_LIGHT_WHITE}RetroVirtualMachine laucher script"
      echo "${COLOR_GREEN}%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"
      echo
      echo "${COLOR_LIGHT_CYAN}[Warning]${COLOR_LIGHT_YELLOW} RVM is not configured for your system yet."
      echo
      echo "${COLOR_CYAN}Proceeding to install/configure RVM on your system."
      echo
      askSimpleQuestion y Y n N "${COLOR_LIGHT_BLUE}Do you ${COLOR_LIGHT_CYAN}already${COLOR_LIGHT_BLUE} \
have RVM installed (${COLOR_WHITE}y/n${COLOR_LIGHT_BLUE})?${COLOR_NORMAL}" ANS
      echo ${COLOR_LIGHT_WHITE}$ANS
      if [[ "$ANS" == "y" || "$ANS" == "Y" ]]; then
         configurePersonalRVMInstallation
      elif ! installRVMInCPCtelera; then
         echo "${COLOR_RED}Aborting installation. ${COLOR_NORMAL}"
         exit -1
      fi
   ## Ensure that the file is executable
   elif [ ! -e "$RVMEMU" ]; then
      chmod +x "$RVMEMU"
   fi
}

## Generate a blank config file
##
function generateNewConfigFile() {
##-------------- HERE DOCUMENT FOR CONFIG FILE ------------#
cat > $CONFIG_FILE <<CPCT_RVM_CONFIG_FILE
# cpct_rvm config file
#################################

# RetroVirtualMachines's Full path
RVM=/path/to/RVM
CPCT_RVM_CONFIG_FILE
##-------------- HERE DOCUMENT FOR CONFIG FILE ------------#
}

## Read config file or create it if it does not not exist
##
function readConfigFile {
   ## Generate configfile whenever it does not exist
   if ! isFileReadable $CONFIG_FILE; then
      generateNewConfigFile
   fi

   ## Get value of RVM variable
   RVM=$(extractVarValueFromConfigFile "RVM" $CONFIG_FILE)
}

# First of all, read the config file
readConfigFile

# Proccess command line parameters
while (( $# > 0 )); do
   case "$1" in
      "-a" | "--any-dsk")
         FILE=$(echo *.[dD][sS][kK])
      ;;
      "-ac" | "--any-cdt")
         FILE=$(echo *.[cC][dD][tT])
      ;;
      "-as" | "--any-sna")
         FILE=$(echo *.[sS][nN][aA])
      ;;
      "-c" | "--command")
         if (( $# < 2 )); then
            paramError "'-c/--command' requires a command to be executed as parameter" 18
         fi 
         COMMAND="${2}\n"
         shift
      ;;
      "-ds" | "--default-shader")
         SHADER=""
      ;;
      "-h" | "--help")
        usage
      ;;
      "-m" | "--machine")
         MACHINE="$2"
         if ! contains ${VALIDMACHINES[*]} $MACHINE; then
            paramError "'$MACHINE' is not a valid machine for RVM. Valid machines: (${VALIDMACHINES[*]})" 11
         fi 
         shift
      ;;
      "-n" | "--no-execute")
         EXECUTE=false
      ;;
      "-nw"| "--no-warp")
         WARP=false
         WARPMODE=""
      ;;
      "-r" | "--run")
         if (( $# < 2 )); then
            paramError "'-r/--run' requires a filename to be run as parameter" 12            
         fi 
         COMMAND="RUN\"${2}\"\n"
         shift
      ;;
      "-w"| "--warp")
         WARP=true
         WARPMODE="-w"
      ;;
      *)
         if isCommandLineOption "$1"; then
            paramError "Unrecognized command line option '$1'" 7
         elif [[ "$FILE" == "" ]]; then
            if [ ! -f "$1" ]; then
               paramError "'$1' is not a valid readable file (a DSK/SNA file was expected)." 8
            fi
            FILE="${1}"
         else
            paramError "'${1}' unexpected parameter. Are you trying to provide more than one DSK/SNA file?" 9
         fi
      ;; 
   esac
   shift
done

# First, check RVM installation
checkRVMInstallation "$RVM"

# Check prerrequisites
ensureExecutionPrerequisitesAreInstalled

# Calculate appropriate FILE Path depending on the system
if [[ "$FILE" != "" ]]; then
   FILEPATH=$(getMySystemPath "$FILE")

   # Check file extension on launch
   EXT=$(echo ${FILEPATH:${#FILEPATH}-3:${#FILEPATH}} | tr /a-z/ /A-Z/)
   if [ "$EXT" = "SNA" ]; then
      FILEMOD="-s"
      EXECUTE=false
   elif [ "$EXT" = "DSK" ] || [ "$EXT" = "CDT" ]; then
      FILEMOD="-i="
   else
      paramError "Invalid file extension '$EXT'. A DSK, SNA or CDT file is required." 10
   fi

   # If CDT/DSK has to be executed, construct its EXECUTEFILE from name
   if "$EXECUTE"; then
      ## Set default conditions for CDT autorun (autoplay + warp)
      if [ "$EXT" = "CDT" ]; then
         AUTOPLAY="-p"
         if $WARP; then
            WARPMODE="-w"
         fi
      fi
      ## Set default RUN command if no command was set
      if [ "$COMMAND" = "" ]; then
         if [ "$EXT" = "CDT" ]; then
            COMMAND="RUN\"\n "
         else
            ## Remove Path and extension from File to get just the name
            ## Cap the lenght of the name up to 8 characters (AMSDOS standard)
            COMMAND=${FILE##*/}
            COMMAND=${COMMAND%%.*}
            COMMAND=${COMMAND:0:8}
            COMMAND="RUN\"${COMMAND}\""
         fi
      fi
      ## Construct EXECUTEFILE command to be given on launch
      EXECUTEFILE="-c=${COMMAND}\n"
   fi
fi

# Select MACHINE to be launched, depending on media and userprefs
if [ "$MACHINE" = "" ]; then
   if [ "$EXT" = "SNA" ]; then
      MACHINE="$DEFAULTMACHINE_SNA"
   elif [ "$EXT" = "CDT" ]; then
      MACHINE="$DEFAULTMACHINE_CDT"
   else
      MACHINE="$DEFAULTMACHINE_DSK"
   fi
fi

# Show selected RVM Options before launching
echo "${COLOR_LIGHT_YELLOW}Launching ${COLOR_LIGHT_CYAN}RetroVirtualMachine V2${COLOR_LIGHT_YELLOW}..."
echo "${COLOR_LIGHT_BLUE}Machine:${COLOR_CYAN}  $MACHINE"
if [ "$FILE" != "" ]; then
   echo "${COLOR_LIGHT_BLUE}${EXT}:     ${COLOR_CYAN} $FILE"
fi
if [ "$COMMAND" != "" ]; then
   echo "${COLOR_LIGHT_BLUE}Command: ${COLOR_CYAN} $COMMAND"
fi
if [ "$WARPMODE" != "" ]; then
   echo "${COLOR_LIGHT_BLUE}WarpMode:${COLOR_CYAN} ON"
fi
echo "${COLOR_NORMAL}"

# On Windows-Cygwin Systems, we need to use cygstart to launch RVM
if checkSystem cygwin; then
   RVM=("cygstart" "${RVM}")
fi

# Launch RVM with appropriate path for DSK/SNA file
"${RVM[@]}" "$SHADER" -b="$MACHINE" "$FILEMOD" "$FILEPATH" "$WARPMODE" "$AUTOPLAY" "$EXECUTEFILE" &> /dev/null &